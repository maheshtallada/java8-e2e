Singleton Pattern says that just
"define a class that has only one instance and provides a global point of access to it".

In other words, a class must ensure that only single instance should be created and single object can be used by all other classes.

Advantage of Singleton design pattern  ::
Saves memory because object is not created at each request. Only single instance is reused again and again.


Usage of Singleton design pattern ::
Singleton pattern is mostly used in multi-threaded and database applications. It is used in logging, caching, thread pools, configuration settings etc.
-------------------------------------------------------------------------------------------------------------------------------------------
A Factory Pattern or Factory Method Pattern says that just 
"define an INTERFACE or ABSTRACT CLASS for creating an object but let the subclasses decide which class to instantiate."

In other words, subclasses are responsible to create the instance of the class.

The Factory Method Pattern is also known as Virtual Constructor.

Advantage of Factory Design Pattern :: 
1. Factory Method Pattern allows the sub-classes to choose the type of objects to create.
2. It promotes the "loose-coupling" by eliminating the need to bind application-specific classes into the code. That means the code interacts solely with the resultant interface or abstract class, so that it will work with any classes that implement that interface or that extends that abstract class.


Usage of Factory Design Pattern ::
1. When a class doesn't know what sub-classes will be required to create
2. When a class wants that its sub-classes specify the objects to be created.
3. When the parent classes choose the creation of objects to its sub-classes.
-------------------------------------------------------------------------------------------------------------------------------------------
Prototype Pattern says that 
"cloning of an existing object instead of creating new one and can also be customized as per the requirement".

1. This pattern should be followed, if the cost of creating a new object is expensive and resource intensive.

The main advantages of prototype pattern are as follows:

	It reduces the need of sub-classing.
	It hides complexities of creating objects.
	The clients can get new objects without knowing which type of object it will be.
	It lets you add or remove objects at runtime.

Usage of Prototype Pattern
	When the classes are instantiated at runtime.
	When the cost of creating an object is expensive or complicated.
	When you want to keep the number of classes in an application minimum.
	When the client application needs to be unaware of object creation and representation.	
-------------------------------------------------------------------------------------------------------------------------------------------
Abstract Factory Pattern 

says that just define an INTERFACE or ABSTRACT class for creating families of related (or dependent) objects but without specifying their concrete sub-classes.
That means Abstract Factory lets a class returns a factory of classes. So, this is the reason that Abstract Factory Pattern is one level higher than the Factory Pattern.

An Abstract Factory Pattern is also known as KIT.

Advantage of Abstract Factory Pattern :: 
1. Abstract Factory Pattern isolates the client code from concrete (implementation) classes.
2. It eases the exchanging of object families.
3. It promotes consistency among objects.


Usage of Abstract Factory Pattern ::

1. When the system needs to be independent of how its object are created, composed, and represented.
2. When the family of related objects has to be used together, then this constraint needs to be enforced.
3. When you want to provide a library of objects that does not show implementations and only reveals interfaces.
4. When the system needs to be configured with one of a multiple family of objects.
-------------------------------------------------------------------------------------------------------------------------------------------