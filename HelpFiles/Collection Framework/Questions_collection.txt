1. Is both equals and hashcode mandatory ?
	when you need to use your object in the hashing based collection, you must override both equals() and hashCode(), otherwise equals() would suffice.
2. HashMap and HashTable
	HashMap is non-syncronized and is not thread safe while HashTable is thread safe and is synchronized.
	HashMap allows one null key and values can be null whereas HashTable doesn't allow null key or value.
	HashMap is faster than HashTable.
	HashMap iterator is fail-safe where HashTable iterator is not fail-safe.
	HashMap extends AbstractMap class where HashTable extends Dictionary class.
3. Apart from equals and hashcode contract and creating a unique hashcode for objects, what is the other contract we can implement to avoid data inconsistency ?
	Something like immutable classes and making map object not to modify its key.
4. How to make a class immutable.
	1. All fields should be declared final
	2. Class itself is declared final so that the derived classes do not make it Mutable.
	3. this reference should not be allowed to escape during object construction such as in anonymous inner classes (for example adding action listener)
	4. Any field that contains reference to mutable objects (such as arrays, collections, StringBuffer, etc)
		i. Are private
		ii. Are never returned or exposed to the caller
		iii. Are the only reference to the Objects that they refer
		iv. Do not change the state of the referenced object after the construction.
		v. If mutable fields must be returned to the caller, then a defensive copy should be returned so that the changes do not reflect in the inner data structure.
		
5. What are the uses of immutable classes ?
6. What is the output of the problem in HashMapExample.java -- it's something to do reg usage of immutable classes for hashmap keys. -- explore around it.