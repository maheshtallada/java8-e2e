1. Is both equals and hashcode mandatory ?
	when you need to use your object in the hashing based collection, you must override both equals() and hashCode(), otherwise equals() would suffice.
2. HashMap and HashTable
	HashMap is non-syncronized and is not thread safe while HashTable is thread safe and is synchronized.
	HashMap allows one null key and values can be null whereas HashTable doesn't allow null key or value.
	HashMap is faster than HashTable.
	HashMap iterator is fail-safe where HashTable iterator is not fail-safe.
	HashMap extends AbstractMap class where HashTable extends Dictionary class.
3. Apart from equals and hashcode contract and creating a unique hashcode for objects, what is the other contract we can implement to avoid data inconsistency ?
	We have to make sure the key of HashMap is of type Immutable class.
4. How to make a class immutable.
	Declare the class as final so it can’t be extended.
	Make all fields private so that direct access is not allowed.
	Don’t provide setter methods for variables.
	Make all mutable fields final so that its value can be assigned only once.
	Initialize all the fields via a constructor performing deep copy.
	Perform cloning of objects in the getter methods to return a copy rather than returning the actual object reference.
		
5. What are the uses of immutable classes ?
	An immutable class is good for caching purposes because you don’t have to worry about the value changes. 
	Another benefit of immutable class is that it is inherently thread-safe, so you don’t have to worry about thread safety in case of multi-threaded environment.
6. What is the output of the problem (sysout stmnt) in Map (folder) -> HashMapExample.java ? -- null
7. What is the Difference Between Collection.stream().forEach() and Collection.forEach()	??
	https://www.baeldung.com/java-collection-stream-foreach
8. Is ArrayList thread-safe ?
	1. We know that by default ArrayList class is not a thread-safe or non-synchronized. That means the multiple threads can access the same ArrayList object or instance simultaneously. Therefore, it cannot be used in the multi-threading environment without explicit synchronization.
	
	2. Use CopyOnWriteArrayList class. This is the thread safe version of ArrayList
9. When we can add elements to a list using listIterator, why do we need CopyonWriteArrayList ?
	CopyonWriteArrayList is to be used in Concurrent environment, i.e., Multi-Threaded environment.
	
	Concurrency vs Multi-threading :: Concurrency is the ability of your program to deal (not doing) with many things at once and is achieved through multithreading