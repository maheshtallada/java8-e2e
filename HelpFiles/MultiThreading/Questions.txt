What is Synchronization ?
	Synchronization in java is the capability to control the access of multiple threads to any shared resource. 
	In the Multithreading concept, multiple threads try to access the shared resources at a time to produce inconsistent results. 
	The synchronization is necessary for reliable communication between threads., allows only one thread at a time.

1. What is volatile keyword in Java ?
	only on variables, not on classes and methods.
	“volatile” tells the compiler that the value of a variable must never be cached as its value may change outside of the scope of the program itself.
	
	i.   Volatile keyword is used to modify the value of a variable by different threads. 
	ii.  It is also used to make classes thread safe.
	iii. It means that multiple threads can use a method and instance of the classes at the same time without any problem. 
	iv.  The volatile keyword can be used either with primitive type or objects.
	v.   The volatile keyword does not cache the value of the variable and always read the variable from the main memory.
	vi.  It is used as alternative to "synchronized" keyword and helps in better performance compared to latter.
	
	https://www.javatpoint.com/volatile-keyword-in-java
2. Difference between synchronized block and method in Java

	Intro : 
		1. Synchronized block and synchronized methods are two ways to use synchronized keywords in Java and implement mutual exclusion on critical sections of code.
		2. Since Java is mainly used to write multi-threading programs,  which present various kinds of thread-related issues like thread-safety, deadlock, and race conditions, which plagues into code mainly because of poor understanding of the synchronization mechanism provided by the Java programming language
		3. Java provides inbuilt synchronized and volatile keywords to achieve synchronization in Java. 
	
	The main difference between the synchronized method and the synchronized block is a selection of locks on which critical section is locked.
	
	synchronized block ::
		Only one thread can access the synchronized block at a time.
		When multiple threads try to access the same block, one of them acquires the lock (block the peice of code), executes the code inside the block, and then release the lock. till then others will be in wait state.
		syntax : 
		
			synchronized(<shared_resource>) {
				//here resource will be like obj reference or variables
			}
	synchronized method:
		similar to block, synchronized method also acquires the lock when multiple threads try to execute it, once its done, it releases the lock.
		syntax: 
		
			public synchronized updateBalance(Account account) {
				// all the code here will be synchronised, ie., no parallel execution.
			}
	static synchronization:
	
		The block level and method level acquires the lock for the particular instance of the class.
		If we want it to be at the class level, we can go for static synchronization.
		
		
		public static synchronized updateBalance(Account account) {
				// all the code here will be synchronised, ie., no parallel execution.
			}
		
		As the method is static, asusual we do not have access to instance variables and methods. So usage of them needs to be changed too.
3. How many ways we can create a thread ?
4. What is the difference between wait and sleep ?
5. Explain various types of locks.
6. What is producer consumer problem ?
7. How to prioritize the Queue ?
8. What is ExecutorService ?
9. What is CompletableFuture ?
10. What is Callable Interface? 
